package Projeto
import Projeto.BoardState._
import Projeto.Cells.Cell
import Projeto.Main.Board

import scala.annotation.tailrec
import scala.collection.immutable.Set.EmptySet
import scala.io.StdIn._
object Main{
  type Board = List[List[Cells.Cell]]
  val Red = "\u001b[31m"
  val Blue = "\u001b[34m"
  val Reset = "\u001b[0m"
  val Yellow = "\u001B[33m"
  val Bold = "\u001B[1m"
  val Green = "\u001B[32m"
  def main(args: Array[String]): Unit = {

    val l =List(-0.651832, -0.926538, -0.97024, -0.572648, 0.5255780000000001, 0.4484379999999999, -0.043910000000000005, 0.912156, 0.5735859999999999, -0.048324000000000034, -0.49846599999999996, 0.346954, -0.12721400000000005, 0.673808, 0.41639800000000005, -0.8304, 0.44898799999999994, -0.1462, 0.9566319999999999, -0.10308799999999996, 0.2772380000000001, 0.192704, 0.818506, -0.944162, 0.898204, 0.06581799999999993, -0.22058999999999995, -0.23549600000000004, 0.422048, 0.025476000000000054, -0.259162, 0.7930299999999999, 0.859648, -0.66784, 0.614452, 0.43927399999999994, 0.7799640000000001, 0.874104, -0.914948, -0.44006999999999996, 0.19428800000000002, -0.31453600000000004, -0.21298799999999996, -0.810414, 0.4153819999999999, 0.45620799999999995, 0.21582199999999996, -0.29884, 0.9056960000000001, 0.42231799999999997, 0.6148340000000001, -0.17227199999999998, 0.546038, 0.01811600000000002, 0.566406, -0.558972, -0.857056, -0.450252, -0.485768, 0.3434520000000001, 0.2743500000000001, -0.962324, 0.9585379999999999, -0.644062, 0.789132, 0.33170199999999994, 0.05758799999999997, 0.21099800000000002, 0.05748400000000009, 0.721822, 0.8675679999999999, 0.6993180000000001, -0.838018, 0.871972, 0.16157, -0.613722, 0.5795999999999999, 0.13780799999999993, 0.277706, 0.8470439999999999, 0.847062, -0.47634, 0.7457400000000001, 0.748524, 0.22177399999999992, 0.5125059999999999, 0.81867, 0.6813, 0.22510800000000009, -0.05018999999999996, -0.9885660000000001, 0.692898, -0.30920000000000003, 0.415732, 0.374104, 0.430558, -0.94461, 0.855858, -0.688422, 0.916976, 0.73285, -0.736396, 0.13680599999999998, -0.581912, 0.17659200000000008, 0.564808, -0.33851600000000004, 0.1207879999999999, 0.659708, -0.35929, -0.51641, 0.822252, 0.010953999999999908, 0.010151999999999939, 0.4728920000000001, 0.7430220000000001, 0.4031119999999999, -0.684368, 0.82846, -0.34971399999999997, -0.990796, -0.130374, -0.42758799999999997, -0.34329600000000005, -0.23738199999999998, -0.299752, 0.10154799999999997, 0.1382859999999999, 0.6466959999999999, -0.446642, -0.67872, -0.984496, 0.589232, -0.20629799999999998, -0.16070600000000002, 0.9202140000000001, 0.6198159999999999, 0.813836, -0.41203599999999996, 0.30721200000000004, -0.9267259999999999, 0.31626200000000004, 0.30536399999999997, -0.13631400000000005, -0.675536, 0.1340920000000001, 0.46348199999999995, -0.29505000000000003, 0.8199639999999999, -0.803828, 0.28901200000000005, 0.7438260000000001, -0.538096, 0.562014, 0.7277340000000001, 0.43943599999999994, 0.46014, 0.5194019999999999, -0.04244000000000003, -0.946594, -0.863214, -0.493606, -0.969172, -0.8742840000000001, -0.941466, 0.506748, 0.9797959999999999, -0.251132, -0.996148, 0.46209199999999995, 0.18731199999999992, 0.22939599999999993, -0.31082, 0.19203199999999998, -0.97659, -0.75085, 0.04841999999999991, 0.711374, 0.15646399999999994, 0.869092, -0.45455999999999996, 0.08651600000000004, -0.89647, 0.9030940000000001, 0.570754, 0.4596, 0.022491999999999956, -0.023743999999999987, 0.818082, -0.39547600000000005, 0.024469999999999992, 0.012605999999999895, 0.0790519999999999, -0.692858, 0.6933640000000001, -0.8213900000000001, 0.41679599999999994, 0.677028, 0.2374940000000001, 0.04114400000000007, 0.19152799999999992, 0.5366740000000001, 0.3062260000000001, 0.6260600000000001, 0.3778539999999999, 0.04731799999999997, 0.78094, 0.5960380000000001, 0.29074200000000006, -0.40309399999999995, 0.31035999999999997, 0.8327880000000001, -0.6573180000000001, -0.904262, -0.155628, 0.6130500000000001, 0.989304, 0.536178, 0.1229340000000001, 0.620476, -0.561958, 0.20185600000000004, 0.2547219999999999, 0.622222, -0.7533, -0.41624799999999995, 0.061317999999999984, -0.015947999999999962, -0.41960200000000003, -0.023146, -0.507376, -0.765576, 0.5241720000000001, 0.26826799999999995, 0.9127559999999999, 0.4677659999999999, -0.53574, 0.322376, -0.552528, -0.610494, -0.6405000000000001, -0.6506799999999999, 0.2835460000000001, 0.694768, 0.3789880000000001, -0.381738, 0.053452000000000055, 0.24439999999999995, 0.15912199999999999, -0.9006460000000001, -0.920154, -0.7167, 0.32031999999999994, -0.718904, -0.694488, 0.26723600000000003, 0.1448879999999999, 0.9858560000000001, 0.805788, 0.18156400000000006, -0.939478, 0.639222, -0.79966, -0.258088, 0.4253499999999999, 0.3918839999999999, 0.6403239999999999, -0.29634400000000005, -0.672848, 0.19046999999999992, -0.03154599999999996, 0.6596660000000001, -0.85932, -0.11520799999999998, -0.793362, -0.87224, 0.7338359999999999, 0.9450879999999999, 0.661562, 0.21438000000000001, 0.9293100000000001, -0.6734519999999999, 0.66238, -0.576946, 0.702858, 0.560152, 0.549434, 0.08092999999999995, 0.38724000000000003, 0.33824999999999994, 0.3966559999999999, 0.2707440000000001, 0.13085799999999992, 0.3604879999999999, -0.00922400000000001, 0.559372, 0.5016, 0.30050599999999994, -0.11525799999999997, 0.7031339999999999, -0.923812, 0.4042140000000001, -0.374166, -0.42763399999999996, 0.6092820000000001, -0.730208, 0.16693000000000002, 0.43035, -0.7446900000000001, 0.770354, -0.33729600000000004, 0.6131439999999999, -0.983256, 0.667268, -0.00801799999999997, 0.19214200000000003, -0.42166800000000004, 0.688294, 0.3475220000000001, -0.756706, 0.26421000000000006, -0.402014, -0.5122260000000001, 0.8281540000000001, 0.9200980000000001, -0.13880800000000004, 0.8032079999999999, 0.7877259999999999, 0.03153000000000006, 0.4044559999999999, -0.774068, 0.4341980000000001, 0.7112339999999999, 0.24662000000000006, 0.11500200000000005, 0.23793599999999993, -0.12096799999999996, 0.3348420000000001, -0.368916, 0.855286, 0.3142799999999999, 0.6583840000000001, -0.48014, 0.1885460000000001, 0.937748, 0.7853779999999999, 0.756284, -0.06081800000000004, -0.389602, 0.045454000000000105, 0.15044400000000002, 0.29856400000000005, -0.44977999999999996, 0.41562199999999994, 0.8316539999999999, 0.6761839999999999, 0.17156400000000005, 0.7126619999999999, -0.407412, 0.42888799999999994, 0.978734, 0.29946399999999995, 0.790646, -0.03912199999999999, 0.49413799999999997, 0.821796, 0.5628200000000001, 0.3988560000000001, 0.8624700000000001, 0.42699200000000004, 0.8177399999999999, -0.601844, -0.903898, 0.22761600000000004, -0.51972, -0.413856, 0.20693800000000007, 0.15410199999999996, -0.48839200000000005, 0.36822, -0.7411479999999999, 0.7172780000000001, -0.890022, -0.36071600000000004, -0.770784, -0.791094, -0.06965600000000005, 0.679448, -0.28466800000000003, 0.6137060000000001, 0.08317400000000008, 0.627732, 0.14074199999999992, -0.5182880000000001, 0.7718339999999999, 0.032890000000000086, 0.04669400000000001, -0.687944, 0.826892, 0.9652700000000001, 0.5658700000000001, 0.6808399999999999, 0.34601799999999994, 0.21463199999999993, -0.18875600000000003, -0.260406, 0.3645860000000001, -0.890022, 0.7172780000000001, -0.7411479999999999, 0.36822, -0.48839200000000005, 0.15410199999999996, 0.20693800000000007, -0.413856, -0.51972, 0.22761600000000004, -0.903898, -0.601844, 0.8177399999999999, 0.42699200000000004, 0.8624700000000001, 0.3988560000000001, 0.5628200000000001, 0.821796, 0.49413799999999997, -0.03912199999999999, 0.790646, 0.29946399999999995, 0.978734, 0.42888799999999994, -0.407412, 0.7126619999999999, 0.17156400000000005, 0.6761839999999999, 0.8316539999999999, 0.41562199999999994, -0.44977999999999996, 0.29856400000000005, 0.15044400000000002, 0.045454000000000105, -0.389602, -0.06081800000000004, 0.756284, 0.7853779999999999, 0.937748, 0.1885460000000001, -0.48014, 0.6583840000000001, 0.3142799999999999, 0.855286, -0.368916, 0.3348420000000001, -0.12096799999999996, 0.23793599999999993, 0.11500200000000005, 0.24662000000000006, 0.7112339999999999, 0.4341980000000001, -0.774068, 0.4044559999999999, 0.03153000000000006, 0.7877259999999999, 0.8032079999999999, -0.13880800000000004, 0.9200980000000001, 0.8281540000000001, -0.5122260000000001, -0.402014, 0.26421000000000006, -0.756706, 0.3475220000000001, 0.688294, -0.42166800000000004, 0.19214200000000003, -0.00801799999999997, 0.667268, -0.983256, 0.6131439999999999, -0.33729600000000004, 0.770354, -0.7446900000000001, 0.43035, 0.16693000000000002, -0.730208, 0.6092820000000001, -0.42763399999999996, -0.374166, 0.4042140000000001, -0.923812, 0.7031339999999999, -0.11525799999999997, 0.30050599999999994, 0.5016, 0.559372, -0.00922400000000001, 0.3604879999999999, 0.13085799999999992, 0.2707440000000001, 0.3966559999999999, 0.33824999999999994, 0.38724000000000003, 0.08092999999999995, 0.549434, 0.560152, 0.702858, -0.576946, 0.66238, -0.6734519999999999, 0.9293100000000001, 0.21438000000000001, 0.661562, 0.9450879999999999, 0.7338359999999999, -0.87224, -0.793362, -0.11520799999999998, -0.85932, 0.6596660000000001, -0.03154599999999996, 0.19046999999999992, -0.672848, -0.29634400000000005, 0.6403239999999999, 0.3918839999999999, 0.4253499999999999, -0.258088, -0.79966, 0.639222, -0.939478, 0.18156400000000006, 0.805788, 0.9858560000000001, 0.1448879999999999, 0.26723600000000003, -0.694488, -0.718904, 0.32031999999999994, -0.7167, -0.920154, -0.9006460000000001, 0.15912199999999999, 0.24439999999999995, 0.053452000000000055, -0.381738, 0.3789880000000001, 0.694768, 0.2835460000000001, -0.6506799999999999, -0.6405000000000001, -0.610494, -0.552528, 0.322376, -0.53574, 0.4677659999999999, 0.9127559999999999, 0.26826799999999995, 0.5241720000000001, -0.765576, -0.507376, -0.023146, -0.41960200000000003, -0.015947999999999962, 0.061317999999999984, -0.41624799999999995, -0.7533, 0.622222, 0.2547219999999999, 0.20185600000000004, -0.561958, 0.620476, 0.1229340000000001, 0.536178, 0.989304, 0.6130500000000001, -0.155628, -0.904262, -0.6573180000000001, 0.8327880000000001, 0.31035999999999997, -0.40309399999999995, 0.29074200000000006, 0.5960380000000001, 0.78094, 0.04731799999999997, 0.3778539999999999, 0.6260600000000001, 0.3062260000000001, 0.5366740000000001, 0.19152799999999992, 0.04114400000000007, 0.2374940000000001, 0.677028, 0.41679599999999994, -0.8213900000000001, 0.6933640000000001, -0.692858, 0.0790519999999999, 0.012605999999999895, 0.024469999999999992, -0.39547600000000005, 0.818082, -0.023743999999999987, 0.022491999999999956, 0.4596, 0.570754, 0.9030940000000001, -0.89647, 0.08651600000000004, -0.45455999999999996, 0.869092, 0.15646399999999994, 0.711374, 0.04841999999999991, -0.75085, -0.97659, 0.19203199999999998, -0.31082, 0.22939599999999993, 0.18731199999999992, 0.46209199999999995, -0.996148, -0.251132, 0.9797959999999999, 0.506748, -0.941466, -0.8742840000000001, -0.969172, -0.493606, -0.863214, -0.946594, -0.04244000000000003, 0.5194019999999999, 0.46014, 0.43943599999999994, 0.7277340000000001, 0.562014, -0.538096, 0.7438260000000001, 0.28901200000000005, -0.803828, 0.8199639999999999, -0.29505000000000003, 0.46348199999999995, 0.1340920000000001, -0.675536, -0.13631400000000005, 0.30536399999999997, 0.31626200000000004, -0.9267259999999999, 0.30721200000000004, -0.41203599999999996, 0.813836, 0.6198159999999999, 0.9202140000000001, -0.16070600000000002, -0.20629799999999998, 0.589232, -0.984496, -0.67872, -0.446642, 0.6466959999999999, 0.1382859999999999, 0.10154799999999997, -0.299752, -0.23738199999999998, -0.34329600000000005, -0.42758799999999997, -0.130374, -0.990796, -0.34971399999999997, 0.82846, -0.684368, 0.4031119999999999, 0.7430220000000001, 0.4728920000000001, -0.270566, 0.2671140000000001, 0.17944000000000004, 0.54121, -0.46624, -0.891256, 0.1207879999999999, -0.33851600000000004, 0.564808, 0.17659200000000008, -0.581912, -0.52609, -0.50633, 0.9202600000000001, 0.36984400000000006, -0.732596, 0.52498, 0.2935939999999999, 0.7588220000000001, -0.34484000000000004, 0.4000140000000001, -0.30920000000000003, 0.692898, -0.9885660000000001, -0.05018999999999996, 0.22510800000000009, 0.6813, 0.81867, 0.5125059999999999, 0.22177399999999992, -0.726842, -0.48973599999999995, 0.9383079999999999, -0.615364, -0.48350800000000005, -0.09844200000000003, -0.44367599999999996, 0.662576, 0.841412, 0.09210800000000008, 0.871972, -0.838018, 0.6993180000000001, 0.8675679999999999, 0.721822, 0.05748400000000009, 0.21099800000000002, 0.05758799999999997, 0.33170199999999994, 0.789132, -0.644062, 0.9585379999999999, -0.962324, 0.2743500000000001, 0.3434520000000001, -0.485768, -0.450252, -0.857056, -0.558972, 0.566406, 0.01811600000000002, 0.546038, -0.17227199999999998, 0.6148340000000001, 0.42231799999999997, 0.9056960000000001, -0.29884, 0.21582199999999996, 0.45620799999999995, 0.4153819999999999, -0.810414, -0.21298799999999996, -0.31453600000000004, 0.19428800000000002, -0.44006999999999996, -0.914948, 0.874104, 0.7799640000000001, 0.43927399999999994, 0.614452, -0.66784, 0.859648, 0.7930299999999999, -0.259162, 0.025476000000000054, 0.422048, -0.23549600000000004, -0.22058999999999995, 0.06581799999999993, 0.898204, -0.944162, 0.818506, 0.192704, 0.2772380000000001, -0.10308799999999996, 0.9566319999999999, -0.1462, 0.44898799999999994, -0.8304, 0.41639800000000005, 0.673808, -0.12721400000000005, 0.346954, -0.49846599999999996, -0.048324000000000034, 0.5735859999999999, 0.912156, -0.043910000000000005, 0.4484379999999999, 0.5255780000000001, -0.572648, -0.97024, -0.926538, -0.651832)

    val network = NeuralNetwork.Create(l,25,15,25)
    PlaySuperAI(BoardState(BoardState.defineBoard(5), UnionFind(UnionFind.init(5))), network)

  }
  @tailrec def mainMenu(){
    println(s"      ${Bold}${Red}HEX${Reset}-${Blue}GAME!${Reset}\n\n${Bold}     Main  Menu${Reset}\n\n1-Player vs. CPU (easy)\n2-Player vs. Player\nQ-Quit")
    readLine.trim.toUpperCase match{
      case "1"=>updatePvC(BoardState(BoardState.defineBoard(5), UnionFind(UnionFind.init(5))), Random(10));mainMenu
      case "2"=>updatePvP(BoardState(BoardState.defineBoard(5), UnionFind(UnionFind.init(5))));mainMenu
      case "Q"=>println("\n See you next time!");
      case _  =>println("Invalid Option!");mainMenu
    }

  }
  @tailrec def updatePvC(boardState: BoardState, randomState: RandomState, history:List[BoardState] = List.empty[BoardState]){
    boardState.draw
    boardState.getInput match {
      case (-1,-2)=>{println(s"${Yellow}Thank you for playing!${Reset}")}
      case (-1,-1)=> {
        history match{
          case Nil=>println(s"${Red}There are no moves to Undo${Reset}");updatePvC(boardState,randomState, history)
          case h::t=>println(s"${Green}Move undone${Reset}");updatePvC(h,randomState,t)
        }
      }
      case (x,y)=>  {
        val playerBoardState: BoardState = boardState.playGameState((y, x), Cells.Blue)
        val ((cpuX,cpuY), nextRand) = playerBoardState.playCPUGameState(randomState)
        val CPUBoardState: BoardState = playerBoardState.playGameState((cpuY,cpuX), Cells.Red)
        CPUBoardState.hasContinuousLine match {
          case Some("P1") => playerBoardState.draw; println(s"${Yellow}Conratulations, You Won!!!${Reset}")
          case Some("P2") => CPUBoardState.draw; println(s"${Yellow}Oh no, you lost to CPU :(${Reset}")
          case _ => updatePvC(CPUBoardState, nextRand, boardState::history)
        }
      }
    }
  }
  @tailrec def updatePvP(boardState: BoardState, history: List[BoardState] = List.empty[BoardState], currentPlayer : Cell = Cells.Blue) {
    boardState.draw
    boardState.getInput match {
      case (-1, -2) => println(s"${Yellow}Thank you for playing!${Reset}")
      case (-1, -1) =>
        history match {
          case Nil => println(s"${Red}There are no moves to Undo${Reset}"); updatePvP(boardState, history)
          case h :: t => println(s"${Green}Move undone${Reset}"); updatePvP(h, t)
        }
      case (x, y) => {
        val playerBoardState: BoardState = boardState.playGameState((y, x), currentPlayer)
        val nextPlayer = if(currentPlayer.equals(Cells.Blue)) Cells.Red else Cells.Blue
        playerBoardState.hasContinuousLine match {
          case Some("P1") => playerBoardState.draw; println(s"${Yellow}Conratulations, Player 1 Won!!!${Reset}")
          case Some("P2") => playerBoardState.draw; println(s"${Yellow}Conratulations, Player 2 Won!!!${Reset}")
          case _ => updatePvP(playerBoardState, boardState :: history, nextPlayer)
        }
      }
    }
  }

  def GenerateSuperAI(level:Int): NeuralNetwork = {
    println("Generating Super AI... (This process can take some time)")
    val initialPopulation:Generation = Generation.Start(64,(-1,1),Random(14))
    def nGen(n:Int, acc:Generation,randomState: RandomState):(Generation,RandomState)={

      def nextGen(generation: Generation): (Generation,RandomState) = {
        val s = generation.Select()
        val sum = (s.map(_._2) foldRight 0)(_+_)
        println("Generation " + (level-n) + "/" + level + "  Total moves done: " + sum)
        if(sum<=90){
          val w = s.sortBy(_._2)
          val x = w(0)._1
          println(x)
        }
        val g =generation.Breed(s.map(_._1), randomState)
        g
      }

      n match{
        case 0=> (acc,randomState)
        case x=> val d = nextGen(acc) ;nGen(x-1, d._1, d._2)
      }
    }
    val ngen = nGen(level,initialPopulation, Random(20))
    println("Super AI Level " + level + " successfully generated")
    ngen._1.Strongest
  }

  def PlaySuperAI(boardState: BoardState,neuralNetwork: NeuralNetwork):Unit={
    boardState.draw
    boardState.getInput match {
      case (x, y) => {
        val playerBoardState = boardState.playGameState((y, x), Cells.Blue)
        val (cpuX, cpuY) = neuralNetwork.Predict(playerBoardState, Cells.Red)
        val CPUBoardState = playerBoardState.playGameState((cpuY, cpuX), Cells.Red)
        CPUBoardState.hasContinuousLine match {
          case Some("P1") => playerBoardState.draw; println(s"${Yellow}Conratulations, You Won!!!${Reset}")
          case Some("P2") => CPUBoardState.draw; println(s"${Yellow}Oh no, you lost to CPU :(${Reset}")
          case _ => PlaySuperAI(CPUBoardState, neuralNetwork)
        }
      }
    }
  }




  }




